###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key \"\"\n  }\n}\n\n// client<llm> CustomGPT4oMini {\n//   provider openai\n//   retry_policy Exponential\n//   options {\n//     model \"gpt-4o-mini\"\n//     api_key env.OPENAI_API_KEY\n//   }\n// }\n\n// client<llm> CustomSonnet {\n//   provider anthropic\n//   options {\n//     model \"claude-3-5-sonnet-20241022\"\n//     api_key env.ANTHROPIC_API_KEY\n//   }\n// }\n\n\n// client<llm> CustomHaiku {\n//   provider anthropic\n//   retry_policy Constant\n//   options {\n//     model \"claude-3-haiku-20240307\"\n//     api_key env.ANTHROPIC_API_KEY\n//   }\n// }\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\n// client<llm> CustomFast {\n//   provider round-robin\n//   options {\n//     // This will alternate between the two clients\n//     strategy [CustomGPT4oMini, CustomHaiku]\n//   }\n// }\n\n// // https://docs.boundaryml.com/docs/snippets/clients/fallback\n// client<llm> OpenaiFallback {\n//   provider fallback\n//   options {\n//     // This will try the clients in order until one succeeds\n//     strategy [CustomGPT4oMini, CustomGPT4oMini]\n//   }\n// }\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.87.2\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "tool_call.baml": "class Add {\n  tool_name \"add_2_numbers\" @description(\"Use this tool to get the sum of two numbers only.\")\n  x float | \"previous_output\" @description(\"The first variable\")\n  y float @description(\"The second variable\")\n}\n\nclass Subtract {\n  tool_name \"subtract_two_numbers\" @description(\"Use this tool to get the difference between two numbers only.\")\n  x float  | \"previous_output\" @description(\"The first variable\")\n  y float  @description(\"The second variable\")\n}\n\nclass Divide {\n    tool_name \"divide_two_numbers\" @description(\"Use this tool to divide variable x by y.\")\n    x float | \"previous_output\" @description(\"The first variable\")\n    y float  @description(\"The second variable\")\n}\n\nclass Multiply {\n    tool_name \"multiple_two_numbers\" @description(\"Use this tool to multiply variable x by y.\")\n    x float  | \"previous_output\" @description(\"The first variable\")\n    y float @description(\"The second variable\")\n}\n\nclass MISSING {\n    tool_name \"MISSING\" @description(\"use this when can't do anything\")\n}\n\nenum ToolChoose {\n    ADD_TWO_NUMBERS @alias(\"add_2_numbers\") @description(#\"Tool to add 2 numbers\"#)\n    SUBTRACT_TWO_NUMBERS @alias(\"subtract_2_numbers\") @description(#\"Tool to add 2 numbers\"#)\n    DIVIDE_TWO_NUMBERS @alias(\"divide_2_numbers\") @description(#\"Tool to add 2 numbers\"#)\n    MULTIPLY_TWO_NUMBERS @alias(\"multiply_2_numbers\") @description(#\"Tool to add 2 numbers\"#)\n    MISSING @description(#\"can't find a tool to use\"#)\n}\n\n\nclass SmallerProblems {\n    problem_statement string\n    tool_chosen Add | Subtract | Divide | Multiply | MISSING\n}\n\n\nfunction BreakProblemsAndFindTools(user_message: string) -> SmallerProblems[]{\n  client CustomGPT4o\n  prompt #\"\n\n    {{ _.role('system') }}\n    Analyse the user message given, and break them into multiple small solvable steps in sequential order.\n    if Can't find an appropriate tool to solve a small problem, assign it the value MISSING for tool_chose\n    \n    --------\n\n    {{ ctx.output_format }}\n    \n    --------\n    \n    {{ _.role('user') }}\n    {{ user_message }}\n  \"#\n}\n\n// class ToolCall {\n//   tool_name ToolChoose\n//   parameters Add | Subtract | Divide | Multiply | MISSING\n// }\n\n// function AssignToolsAndParameters(subproblems: SmallerProblems[]) -> (Add | Subtract | Divide | Multiply | MISSING)[]{\n//   client CustomGPT4o\n//   prompt #\"\n\n//     {{ _.role('system') }}\n//     Analyse the smaller problems given and choose the right tool, and give the inputs right too.\n    \n//     --------\n\n//     {{ ctx.output_format }}\n    \n//     --------\n    \n//     {{ _.role('user') }}\n//     {{subproblems}}\n//   \"#\n// }\n\n\n    \n\n\n\ntest AddTool {\n    functions [BreakProblemsAndFindTools]\n    args {\n        user_message #\"\n            Add 5 with 2.5 and 3.2 and divide it by 4. And say chotabheem\n        \"#\n    }\n\n}\n\n///\n// [\n//   {\n//     \"problem_statement\": \"Add 5 with 2.5.\",\n//     \"tool_chosen\": \"ADD_TWO_NUMBERS\"\n//   },\n//   {\n//     \"problem_statement\": \"Add the result with 3.2.\",\n//     \"tool_chosen\": \"ADD_TWO_NUMBERS\"\n//   },\n//   {\n//     \"problem_statement\": \"Divide the result by 4.\",\n//     \"tool_chosen\": \"DIVIDE_TWO_NUMBERS\"\n//   },\n//   {\n//     \"problem_statement\": \"Say 'chotabheem'.\",\n//     \"tool_chosen\": \"MISSING\"\n//   }\n// ]\n///",
}

def get_baml_files():
    return file_map