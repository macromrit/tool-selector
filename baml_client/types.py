###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class ToolChoose(str, Enum):
    
    ADD_TWO_NUMBERS = "ADD_TWO_NUMBERS"
    SUBTRACT_TWO_NUMBERS = "SUBTRACT_TWO_NUMBERS"
    DIVIDE_TWO_NUMBERS = "DIVIDE_TWO_NUMBERS"
    MULTIPLY_TWO_NUMBERS = "MULTIPLY_TWO_NUMBERS"
    MISSING = "MISSING"

class Add(BaseModel):
    tool_name: Literal["add_2_numbers"]
    x: Union[float, Literal["previous_output"]]
    y: float

class Divide(BaseModel):
    tool_name: Literal["divide_two_numbers"]
    x: Union[float, Literal["previous_output"]]
    y: float

class MISSING(BaseModel):
    tool_name: Literal["MISSING"]

class Multiply(BaseModel):
    tool_name: Literal["multiple_two_numbers"]
    x: Union[float, Literal["previous_output"]]
    y: float

class SmallerProblems(BaseModel):
    problem_statement: str
    tool_chosen: Union["Add", "Subtract", "Divide", "Multiply", "MISSING"]

class Subtract(BaseModel):
    tool_name: Literal["subtract_two_numbers"]
    x: Union[float, Literal["previous_output"]]
    y: float
